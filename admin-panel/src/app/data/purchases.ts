import { DateFilter } from '../../types/date-filter';
import { generateDate, getRandomItem } from '../../utils/dummy-data';
import { CurrencyCode } from '../model/enum/currency-code';
import { Unit } from '../model/enum/unit-type';
import { Purchase } from '../model/purchase';
import { INVENTORY_ITEMS } from './inventory';
import { STORES } from './stores';
import { SUPPLIERS } from './suppliers';

export const Purchases: Purchase[] = [
  {
    id: 1,
    createdAt: generateDate(DateFilter.TODAY),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 1,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-5-7'),
    note: 'aa',
    unit: Unit.GRAM,
    purchaseDate: new Date(),
  },
  {
    id: 2,
    createdAt: generateDate(DateFilter.LAST_12_MONTHS),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 400,
    quantity: 4,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-03-01'),
    note: 'dd',
    unit: Unit.GRAM,
    purchaseDate: new Date('2024-4-7'),
  },
  {
    id: 3,
    createdAt: generateDate(DateFilter.LAST_7_DAYS),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 6,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-4-7'),
    note: 'this is test note',
    unit: Unit.GRAM,
    purchaseDate: new Date('2024-5-1'),
  },
  {
    id: 4,
    createdAt: generateDate(DateFilter.LAST_12_MONTHS),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 10,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-03-01'),
    note: 'testing',
    unit: Unit.GRAM,
    purchaseDate: new Date('2024-4-7'),
  },
  {
    id: 5,
    createdAt: generateDate(DateFilter.TODAY),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 12,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-5-7'),
    note: 'The name of test app is demo app',
    unit: Unit.GRAM,
    purchaseDate: new Date(),
  },
  {
    id: 6,
    createdAt: generateDate(DateFilter.LAST_12_MONTHS),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 100,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-03-01'),
    note: 'nothing',
    unit: Unit.GRAM,
    purchaseDate: new Date('2024-4-7'),
  },
  {
    id: 7,
    createdAt: generateDate(DateFilter.TODAY),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 800,
    quantity: 142,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-5-7'),
    note: 'another',
    unit: Unit.GRAM,
    purchaseDate: new Date(),
  },
  {
    id: 8,
    createdAt: generateDate(DateFilter.LAST_12_MONTHS),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 300,
    quantity: 20,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-03-01'),
    note: 'Suppliers',
    unit: Unit.GRAM,
    purchaseDate: new Date('2024-4-7'),
  },
  {
    id: 9,
    createdAt: generateDate(DateFilter.LAST_4_WEEKS),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 1,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-5-7'),
    note: 'inventories',
    unit: Unit.GRAM,
    purchaseDate: new Date('2024-6-3'),
  },
  {
    id: 10,
    createdAt: generateDate(DateFilter.LAST_12_MONTHS),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 1200,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-03-01'),
    note: 'dkjsgkjsdbgjkdbng',
    unit: Unit.GRAM,
    purchaseDate: new Date('2024-4-7'),
  },
  {
    id: 11,
    createdAt: generateDate(DateFilter.TODAY),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 1,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-5-7'),
    note: 'All customer has purchased',
    unit: Unit.GRAM,
    purchaseDate: new Date(),
  },
  {
    id: 12,
    createdAt: generateDate(DateFilter.LAST_12_MONTHS),
    updatedAt: new Date('2024-01-01'),
    inventoryItemId: getRandomItem(INVENTORY_ITEMS),
    storeId: getRandomItem(STORES),
    price: 200,
    quantity: 123,
    supplierId: getRandomItem(SUPPLIERS),
    expirationDate: new Date('2024-03-01'),
    note: 'For game testing',
    unit: Unit.GRAM,
    purchaseDate: new Date('2024-4-7'),
  },
].map((item) =>
  Purchase.fromJSON({
    ...item,
    totalPrice: item.price * item.quantity,
    currency: CurrencyCode.PHP,
  })
);
